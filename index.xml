<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Avito Android</title><link>https://avito-tech.github.io/avito-android/</link><description>Recent content in Introduction on Avito Android</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 20 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://avito-tech.github.io/avito-android/index.xml" rel="self" type="application/rss+xml"/><item><title>Android lint and Gradle worker API workaround</title><link>https://avito-tech.github.io/avito-android/posts/lint-worker-api-workaround/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/posts/lint-worker-api-workaround/</guid><description>Workaround for Android lint that doesn&amp;rsquo;t use Gradle Worker API # Issue #145235363
Problem # We have a lot of modules in the project, and things build in parallel very well. However, there is a contention between Android lint and UI-tests in CI builds. Both tasks are on a final application module.
We use workers to parallelize different UI-testing tasks and enable Gradle workers API for available Android Gradle plugin tasks.</description></item><item><title>Open source for CI/CD and test infrastructure for Android</title><link>https://avito-tech.github.io/avito-android/posts/open-source-introduction/</link><pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/posts/open-source-introduction/</guid><description>Open source: CI/CD and test infrastructure for Android # Avito.ru is the second biggest classified in the world. We have moved our Android infrastructure into open source: Gradle plugins, emulators, and test libraries. Our code will be useful in automating CI/CD and will also facilitate the coding and support of autotests.
In this review, we will explain why we decided to move into open source, present the central libraries of the project, and suggest whom to contact with any questions.</description></item><item><title/><link>https://avito-tech.github.io/avito-android/docs/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/release/</guid><description>Infrastructure release # This page contains Avito specific details We publish releases to Bintray.
Publishing a new release # Check current status of Infra Gradle plugins configuration compatibility with Avito.
If it is Failed you could release from previous Succeed commits or fix compatibility problems. Check current status of Nightly Avito integration build.
If it is Failed you could release from previous Succeed commits or fix problems.</description></item><item><title/><link>https://avito-tech.github.io/avito-android/docs/test/screenchecks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/screenchecks/</guid><description>Screen checks # Screen is abstraction that represents Activity, Fragment or View in tests.
Screen has a property checks of type ScreenChecks with single function isScreenOpened. \ ScreenChecks has a property checkOnEachScreenInteraction. It makes automatic execution isScreenOpened on each interaction with ViewElement on that Screen. \
Default Screen.checks # checkOnEachScreenInteraction works only if:
your Screen extends from PageObject your ViewElements is created by element(Matcher) function interface Screen { val checks: ScreenChecks get() = StrictScreenChecks( screen = this, checkOnEachScreenInteraction = false ) } Already existed ScreenChecks # StrictScreenChecks.</description></item><item><title/><link>https://avito-tech.github.io/avito-android/docs/test/snackbar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/snackbar/</guid><description>Snackbar # Why do we need a custom component for snackbar testing?
We can&amp;rsquo;t predict when snackbar will appear or disappear because we have no API to watch that behaviour.
So it&amp;rsquo;s hard to realize our test failed because: there are no snackbars, snackbar has already disappeared or it hasn&amp;rsquo;t appeared yet.
How our library works?
We remember all snackbar showings through the test and give you an ability to check that snackbar showing history.</description></item><item><title>Analytics</title><link>https://avito-tech.github.io/avito-android/docs/analytics/analytics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/analytics/analytics/</guid><description>Analytics # This page contains Avito specific details Для сбора данных используем собственные транспорты:
Clickstream (internal) Statsd Поверх транспорта есть готовые обертки под конкретные задачи:
Performance аналитика</description></item><item><title>Android infrastructure</title><link>https://avito-tech.github.io/avito-android/docs/infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/infrastructure/</guid><description>Avito android infrastructure on github # Monorepo of all tooling to continuously test and deliver apps to users.
Modules # Gradle plugins # To use plugins in your project:
In the settings.gradle:
pluginManagement { repositories { maven { name = &amp;#34;Avito bintray&amp;#34; url = &amp;#34;https://dl.bintray.com/avito/maven&amp;#34; } } resolutionStrategy { eachPlugin { String pluginId = requested.id.id if (pluginId.startsWith(&amp;#34;com.avito.android&amp;#34;)) { def artifact = pluginId.replace(&amp;#34;com.avito.android.&amp;#34;, &amp;#34;&amp;#34;) useModule(&amp;#34;com.avito.android:$artifact:$avitoToolsVersion&amp;#34;) } } } } avitoToolsVersion could be exact version, or property in project&amp;rsquo;s gradle.</description></item><item><title>Android Lint</title><link>https://avito-tech.github.io/avito-android/docs/checks/androidlint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/checks/androidlint/</guid><description>Android Lint # This page contains Avito specific details We use Android lint to check applications in CI.
By default, we check only applications. It&amp;rsquo;s no use checking libraries in isolation.
How to run lint locally # ./gradlew :&amp;lt;app module&amp;gt;:lintRelease
Configure lint to suppress warnings # You can use default capabilities of Android lint (Configure lint to suppress warnings).
@SuppressLint annotation in the code tools:ignore attribute in XML files lint.</description></item><item><title>Android Studio templates</title><link>https://avito-tech.github.io/avito-android/docs/ide/templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ide/templates/</guid><description>Android Studio templates # Запустите install_templates.sh или скопируйте папку вручную из ./templates в $ANDROID_STUDIO_DIR/plugins/android/lib/templates/other</description></item><item><title>Artifacts</title><link>https://avito-tech.github.io/avito-android/docs/cd/artifacts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/cd/artifacts/</guid><description>Артефакты сборки # This page contains Avito specific details Где храним артефакты? # Используем несколько хранилищ:
Artifactory feature-toggles.json api.json staging apk QApps Play market/Play console релизный aab релизный proguard mapping Teamcity Android PR checks Вкладка Artifacts у билда Все файлы pull request Живет ~ 1 месяц Teamcity Android Release Вкладка Artifacts у билда Все файлы релизной сборки Живет ~ 1 месяц</description></item><item><title>Build checks Gradle plugin</title><link>https://avito-tech.github.io/avito-android/docs/projects/buildchecks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/projects/buildchecks/</guid><description>Build checks Gradle plugin # This plugin verifies common build problems with environment and project configuration.
Getting started # Apply the plugin in the root build script:
plugins { id(&amp;#34;com.avito.android.buildchecks&amp;#34;) } In the settings.gradle:
pluginManagement { repositories { maven { name = &amp;#34;Avito bintray&amp;#34; url = &amp;#34;https://dl.bintray.com/avito/maven&amp;#34; } } resolutionStrategy { eachPlugin { String pluginId = requested.id.id if (pluginId.startsWith(&amp;#34;com.avito.android&amp;#34;)) { def artifact = pluginId.replace(&amp;#34;com.avito.android.&amp;#34;, &amp;#34;&amp;#34;) useModule(&amp;#34;com.avito.android:$artifact:$avitoToolsVersion&amp;#34;) } } } } avitoToolsVersion could be exact version, or property in project&amp;rsquo;s gradle.</description></item><item><title>Build properties Gradle plugin</title><link>https://avito-tech.github.io/avito-android/docs/projects/buildproperties/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/projects/buildproperties/</guid><description>Build properties Gradle plugin # Sometimes you need to inspect information about the current build in your app code. The conventional way is to use custom fields in a BuildConfig or resource values.
android { buildTypes { release { buildConfigField(&amp;#34;String&amp;#34;, &amp;#34;GIT_COMMIT&amp;#34;, &amp;#34;\&amp;#34;${commit}\&amp;#34;&amp;#34;) resValue(&amp;#34;string&amp;#34;, &amp;#34;git_commit&amp;#34;, &amp;#34;${commit}&amp;#34;) } debug { // To avoid rebuilding buildConfigField(&amp;#34;String&amp;#34;, &amp;#34;GIT_COMMIT&amp;#34;, &amp;#34;\&amp;#34;_\&amp;#34;&amp;#34;) resValue(&amp;#34;string&amp;#34;, &amp;#34;git_commit&amp;#34;, &amp;#34;_&amp;#34;) } } } BuildConfig and R classes are used to compile the code.</description></item><item><title>Build trace Gradle plugin</title><link>https://avito-tech.github.io/avito-android/docs/projects/buildtrace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/projects/buildtrace/</guid><description>Build trace Gradle plugin # This plugin is a primitive analog of Gradle build scan. Use it if you can&amp;rsquo;t use a build scan for any reason.
This plugin collects tasks execution time in a trace event format.
Getting started # Apply the plugin in the root build.gradle file:
plugins { id(&amp;#34;com.avito.android.build-trace&amp;#34;) } In the settings.gradle:
pluginManagement { repositories { maven { name = &amp;#34;Avito bintray&amp;#34; url = &amp;#34;https://dl.</description></item><item><title>Build Types</title><link>https://avito-tech.github.io/avito-android/docs/assemble/buildtypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/buildtypes/</guid><description>Типы сборок # Различаются по предназначению:
debug - существует для максимально быстрой сборки, чтобы получить максимально быстрый фидбек на изменения в коде staging - для ручного тестирования, сборка проходит медленнее за счет минимизации, но без нее не получится отловить определенный тип багов stagingAutoTest - для авто тестирования, позволяет в тестах дополнительно проверять результат работы r8, а также подключает release source set release - для заливки в магазин Релизная подпись Минимизация Обфускация Avito Settings Charles proxy SourceSet debug нет нет нет да да debug staging нет да нет да да debug stagingAutoTest нет да нет нет ?</description></item><item><title>BuildMetrics</title><link>https://avito-tech.github.io/avito-android/docs/assemble/buildmetrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/buildmetrics/</guid><description>Метрики сборки # This page contains Avito specific details Собираем с каждой сборки:
Время сборки Время конфигурации проекта Эффективность кеширования Собираем каждую метрику со следующими атрибутами:
Успешная\упавшая сборка Окружение: локальная сборка или CI Пользователь (для локальных сборок) Имя хоста (для сборок в CI) Часть метрик доступна с большей детализацией:
Аргументы запуска - какую задачу запускали Модуль Dashboards (internal) # Время сборки Общее время сборки Время сборки в разрезе пользователей и задач Бенчмарки Нестандартные настройки проекта Статистика по задачам Время конфигурации Эффективность кеширования Общая статистика по сборкам Реализация # Собираем плагином com.</description></item><item><title>buildSrc in Gradle</title><link>https://avito-tech.github.io/avito-android/docs/tech_radar/buildsrc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/tech_radar/buildsrc/</guid><description>buildSrc in Gradle # Quadrant: tools
Status (ring): hold
It&amp;rsquo;s a default and convenient way for organizing custom plugins and tasks: Gradle - build sources.
Pros # No binary versions and releases. It works as implicitly included build.
Cons # Slows project synchronization in IDE # At Avito, we had 6% of Kotlin code in buildSrc but it cost us about 40% of the time even with all possible optimizations.</description></item><item><title>CI steps plugin</title><link>https://avito-tech.github.io/avito-android/docs/projects/cisteps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/projects/cisteps/</guid><description>CI steps plugin # Plugin wasn&amp;rsquo;t tested outside Avito yet, so expect difficulties, or even blockers. However, if you interested, please contact us! Plugin creates chains of tasks for CI, encapsulating it under single gradle task.
Getting started # Apply the plugin in the app&amp;rsquo;s build.gradle file:
plugins { id(&amp;#34;com.avito.android.cd&amp;#34;) } The plugin can be applied to a root project or any module.
In the settings.gradle:
pluginManagement { repositories { maven { name = &amp;#34;Avito bintray&amp;#34; url = &amp;#34;https://dl.</description></item><item><title>CI Values</title><link>https://avito-tech.github.io/avito-android/docs/ci/civalues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ci/civalues/</guid><description>Требования к Continuous Integration # Польза # Проверки помогают не допускать ошибки
Скорость получения фидбека # Ожидаем что билд идет не больше 30 минут
Понятность фидбека # При падении однозначно понимаем в чем проблема
Нет лишнего шума (бесполезных warning&amp;rsquo;ов на которые неизвестно как реагировать)
Детерминизм # Запуски на том же коммите должны приводить к одинаковым результатам</description></item><item><title>Code review</title><link>https://avito-tech.github.io/avito-android/docs/contributing/codereview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/contributing/codereview/</guid><description>Code review / Pull request # Инспекция кода проводится для всех изменений в репозитории. Она проводится при отправке изменений в любую ветку, кроме feature. Просмотр и одобрение кода доступно всем разработчикам, но на отправку кода в develop, master накладываются ограничения.
Цели инспекции кода # Улучшение качества кода и продукта:
Поиск и устранение ошибок и уязвимостей Оценка поддерживаемости, удобства использования Проверка на соответствие принятым стандартам (того, что невозможно или нецелесообразно автоматизировать) Для команды:</description></item><item><title>Code style</title><link>https://avito-tech.github.io/avito-android/docs/contributing/codestyle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/contributing/codestyle/</guid><description>Code Style # Автоматизация # Editor config # За настройку code style отвечает editor config. А точнее плагин для IDE.
Нужно убедиться, что плагин установлен и включен (Preferences &amp;gt; Plugins &amp;gt; Installed &amp;gt; search: EditorConfig)
После этого все настройки авто-формата должны применяться по порядку:
EditorConfig настройка на уровне папки EditorConfig настройка на уровне проекта Личная настройка в IDE (если не определены настройки выше) Правила определены в .</description></item><item><title>Contacts</title><link>https://avito-tech.github.io/avito-android/docs/contacts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/contacts/</guid><description>Contacts # Public channels # Telegram chat (Russian)
Internal channels # This section contains Avito specific details Slack # #android-dev - single slack channel for any Android related stuff #android-autotesting - all about testing #speed If your problem is urgent or you cannot solve it for a long time just mention @android-speed-team in any channel from above.
Issues # We track our issues in MBS project.</description></item><item><title>Custom Gradle Plugins</title><link>https://avito-tech.github.io/avito-android/docs/ci/customgradleplugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ci/customgradleplugins/</guid><description>Custom Gradle plugins # Вся логика CI расположена в in-house Gradle плагинах. Для тестирования корневого проекта смотри модуль build-script-test.
How to start # Начни с официальных туториалов, они сэкономят время:
Gradle plugin development tutorials
Для нас не актуальна только публикация плагинов. Custom tasks Если что-то не понятно, здесь тебе помогут:
#gradle (internal) gradle-community.slack.com Работа с плагинами в IDE # Предпочтительно использовать IntelliJ IDEA Import project Согласись использовать Gradle wrapper Settings &amp;gt; Build, Execution, Deployment &amp;gt; Build Tools &amp;gt; Gradle &amp;gt; Runner Delegate IDE build/run actions to Gradle (check) Run tests using : Gradle Test Runner Теперь можно запускать тесты по иконкам run</description></item><item><title>Dependencies</title><link>https://avito-tech.github.io/avito-android/docs/assemble/dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/dependencies/</guid><description>Dependencies # Artifactory # Free version of Artifactory used in Avito Android development to be a proxy for every 3-rd party dependency.
Dependency resolving performance and artifacts availability is crucial for our CI/CD pipelines and developers local work.
[Internal Avito instance]
Adding new proxy repositories # If you have new dependency, which is not listed in available proxies, please contact our team.</description></item><item><title>Dependency Injection with Dagger</title><link>https://avito-tech.github.io/avito-android/docs/architecture/dagger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/architecture/dagger/</guid><description>Dagger # This page contains Avito specific details Материалы # Обязательно прочесть # Документация Тредик на гитхабе с tips &amp;amp; tricks для kotlin Рекомендую к изучению # Видео от одного из авторов Dagger Ron Shapiro, о том, как правильно его готовить Немного устаревшая статья про правильное приготовление dagger ⚠️ Нельзя постигнуть даггер, не смотря какой код он генерирует! Как правильно работать с Dagger # Поддерживаемость прежде всего.</description></item><item><title>Documentation</title><link>https://avito-tech.github.io/avito-android/docs/contributing/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/contributing/docs/</guid><description>Documentation # If the documentation is not good enough, people will not use what you do.
Style guide # Write simply and to the point # Documentation is intended to solve problems. Thus, it has to be simple and clear.
We can recommend several definitive guides on writing in general:
The Elements of Style - William Strunk Jr. Пиши, сокращай (glvrd.ru - online checker) Extra materials about technical writing:</description></item><item><title>Feature toggle</title><link>https://avito-tech.github.io/avito-android/docs/contributing/featuretoggles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/contributing/featuretoggles/</guid><description>Feature toggle # This page contains Avito specific details Feature toggle (Wikipedia) Feature toggle (Martin Fowler) Feature Toggles (Pete Hodgson) Используется для уменьшения рисков при внедрении новой функциональности. Позволяет:
Не держать изменения в отдельной ветке до окончания тестирования Отключить на этапе стабилизации, во время регрессионного тестирования Cоздание # Решение о создании feature toggle принимается на основе различных критериев:
Изолированность изменений, насколько легко их отключить Риск привнести нестабильность Реализация # По умолчанию непротестированная логика должна быть отключена Отключать необходимо самым дешевым и надежным способом, с минимальным влиянием на логику Важно не сломать существующую логику, с отключенным feature toggle, т.</description></item><item><title>Flaky Annotation</title><link>https://avito-tech.github.io/avito-android/docs/test/flakyannotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/flakyannotation/</guid><description>@Flaky Annotation # What is flaky test # A flaky test is a test that could fail or pass without project changes.
One could say this is unstable tests that fail sometimes but not every launch.
It happens when:
test relies on an external environment: back-end, database, environment variables etc. test had written incorrect. Mistakes easy to do in async jobs. test framework has bugs Flaky tests make hard:</description></item><item><title>Git</title><link>https://avito-tech.github.io/avito-android/docs/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/git/</guid><description>Git # Слияние веток # Для слияния веток используем rebase. Это дает линейную историю и снижает нагрузку на CI. Пара команд может упростить вашу жизнь с rebase: git config rerere.enabled true &amp;ndash; автоматическое разрешение повторяющихся конфликтов при rebase git config pull.rebase true &amp;ndash; rebase при обновлении remote-ветки
Local Git hooks # ./git_hooks будут синхронизированы с .git/hooks при первом запуске Gradle.
Git LFS # Могло быть полезно для хранения некоторых бинарных(или просто объемных) ресурсов в git.</description></item><item><title>How to start</title><link>https://avito-tech.github.io/avito-android/docs/contributing/howtostart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/contributing/howtostart/</guid><description>How to start # This page contains Avito specific details Minimal requirements # 16Gb RAM Linux/macOS/Windows 1. Установи Java # Поддерживаем только Java 11.
2. Установи Intellij IDEA или Android Studio # Поддерживаем последнюю стабильную версию, но обычно работает и beta, и canary.
Для обновлений рекомендуется JetBrains Toolbox.
В одном приложении доступны все IDE.
3. Проверь проект # Подключи VPN Запусти в корне проекта: .</description></item><item><title>IDE Benchmarking</title><link>https://avito-tech.github.io/avito-android/docs/ide/benchmarking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ide/benchmarking/</guid><description>Бенчмарки IDE # This text contains Avito specific details Используем Performance testing plugin.
Чтобы плагин работал корректно на macOS, необходимо разрешить Android Studio/IntelliJ IDEA доступ к функциям Accessibility системы. Для этого:
Открываем System Preferences &amp;gt; Security &amp;amp; Privacy Выбираем вкладку Privacy В списке слева находим пункт Accessibility Ставим галочку в списке справа для нужных приложений Как попробовать? # Установи плагин Запусти Help &amp;gt; Diagnostic &amp;gt; Execute Performance Script&amp;hellip; Выбери готовый сценарий из /benchmarks/ide и вставь содержимое скрипта в открывшееся диалоговое окно (содержимое выпадающего списка Please select scenario: не имеет значения) Как проверить гипотезу и измерить разницу?</description></item><item><title>IDE Custom configurations</title><link>https://avito-tech.github.io/avito-android/docs/ide/configurations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ide/configurations/</guid><description>Кастомные конфигурации # Шарим в проекте кастомные run/debug конфигурации, чтобы все работало &amp;ldquo;из коробки&amp;rdquo;.
Так гарантируем одинаковые корректные настройки, случайно не сломается.
avito: собирает, устанавливает и запускает Авито.
avitoInstall: собирает и устанавливает Авито, но не запускает автоматически приложение.
Нужна из-за бага &amp;ldquo;Default activity not found&amp;rdquo;.
localCheck: проверка всех этапов компиляции с учетом импакт анализа
Как расшарить конфигурацию? # Sharing Run/Debug Configurations</description></item><item><title>IDE Speedup</title><link>https://avito-tech.github.io/avito-android/docs/ide/speedup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ide/speedup/</guid><description>IDE Speedup # To increase IDE performance you need to disable all unnecessary stuff and tune some settings.
Increase memory heap # Increasing memory heap
Enable remote build # Mirakle
Disable unnecessary modules # This section contains Avito specific details We develop all our Android applications in a single monorepo. If you work only with some apps you can disable others. To do so, disable relevant Gradle properties on a user level in ~/.</description></item><item><title>Internals</title><link>https://avito-tech.github.io/avito-android/docs/test_framework/internals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test_framework/internals/</guid><description>Internals # Custom click # It is a click without inter-process communication.
Motivation to write custom click # Espresso click uses inter-process communication. It leads to problems:
Flaky clicks on moving views. Because click takes some time to touch after coordinates calculating. &amp;ldquo;misinterpret clicks as long clicks&amp;rdquo; Implementation details # Click happens via dispatch touch event on root view.
Known issues # Can click through any system elements on the screen.</description></item><item><title>Known Issues</title><link>https://avito-tech.github.io/avito-android/docs/knownissues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/knownissues/</guid><description>Known Issues # New Gradle Sync is not supported due to containing Kotlin modules # Disable Settings &amp;gt; Experimental &amp;gt; Only sync the active variant
https://stackoverflow.com/questions/54201216/android-studio-3-3-new-gradle-sync-is-not-supported-due-to-containing-kotlin-mo/
Instrumentation tests run from Android Studio are failed with java.lang.NoClassDefFoundError # The problem occurs when running a test from Android Studio because of generated Run Configuration has inappropriate type. Wherein test run from command line via ./gradlew test ends up normally.</description></item><item><title>Manual</title><link>https://avito-tech.github.io/avito-android/docs/test/manual/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/manual/</guid><description>Ручное тестирование # This page contains Avito specific details Обрати внимание на Типы Сборок
Где взять сборку? # QApps</description></item><item><title>Minimization</title><link>https://avito-tech.github.io/avito-android/docs/assemble/minimization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/minimization/</guid><description>Минимизация сборки # This page contains Avito specific details Официальная документация
В проекте используется R8 (задача (internal) на включение &amp;ldquo;full mode&amp;rdquo;)
Параметры для сборки задаются в корневом gradle.properties
В каких типах сборки включена минимизация: Типы сборки
Story &amp;ldquo;Защита от ошибок минификации кода&amp;rdquo; (internal)
Конфигурация # Общая конфигурация собирается по частям из нескольких источников. Помимо способов описанных в документации, конкретно в нашем проекте используется:
$ANDROID_HOME/tools/proguard/proguard-android-optimize.txt базовый конфиг &amp;lt;app&amp;gt;/proguard/**/*.</description></item><item><title>Mirakle</title><link>https://avito-tech.github.io/avito-android/docs/assemble/mirakle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/mirakle/</guid><description>Mirakle # This page contains Avito specific details Это Gradle плагин, который переносит сборку проекта на более мощную машину в дата центре. Компьютер во время сборки не так нагружен, можно продолжать работать с проектом.
Как работает:
mermaid.initialize({ flowchart: { useMaxWidth:true } }); sequenceDiagram 💻-+Builder: Держи проект (rsync) Note right of Builder: Собираю Builder--💻: Получи что уже готово Builder--💻: Закончил Как настроить в первый раз? # Установи rsync Посмотри какой host прописан в mirakle.</description></item><item><title>Mocking in tests</title><link>https://avito-tech.github.io/avito-android/docs/test_framework/mocking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test_framework/mocking/</guid><description>Mocking in tests # This page contains Avito specific details To use a specific state you need to find a suitable @Rule or annotation.
Thus, test runner knows how to prepare it for the test (more details).
Mocks # Networking # Mocking a network on http layer # @get:Rule val mockApi = MockWebServerApiRule() @Before fun setUp() { mockApi.registerMock( Mock( requestMatcher = { path.contains(&amp;#34;1/feature/item&amp;#34;) }, response = MockResponse().</description></item><item><title>Modules</title><link>https://avito-tech.github.io/avito-android/docs/architecture/modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/architecture/modules/</guid><description>Modules # This page contains Avito specific details This page describes common structure of modules.
Modules grouping # By application # On the top-level all modules are grouped by application:
mermaid.initialize({ flowchart: { useMaxWidth:true } }); flowchart TB subgraph avito-app-modules[ ] avito--avito-modules[...] demo-app--avito-modules end subgraph domofond-app-modules[ ] domofond--domofond-modules[...] end subgraph common-modules[ ] common end avito-modules--common-modules domofond-modules--common-modules avito, domofond: application modules. They only consume and wire features into an Android application.</description></item><item><title>Performance Testing</title><link>https://avito-tech.github.io/avito-android/docs/test/performancetesting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/performancetesting/</guid><description>Performance Testing # TBD</description></item><item><title>Profiling</title><link>https://avito-tech.github.io/avito-android/docs/assemble/profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/profiling/</guid><description>Профилирование сборки # Чтобы посмотреть подробную информацию о скорости сборке попробуй разные инструменты, выбери наиболее простой.
Build Speed window (AS 4+) # Собери проект View &amp;gt; Tool Windows &amp;gt; Build &amp;gt; Build Speed Gradle build scan # https://guides.gradle.org/creating-build-scans/
Запусти сборку с аргументом --scan:
./gradlew build --scan Либо отправь с последней сборки:
./gradlew buildScanPublishPrevious В конце лога будет ссылка на отчет.
Known issues:
Не приходит первое письмо для активации ссылки:</description></item><item><title>QApps</title><link>https://avito-tech.github.io/avito-android/docs/cd/qapps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/cd/qapps/</guid><description>QApps # This page contains Avito specific details QApps Android
This is the internal storage with builds for manual testing.
We publish builds automatically after merge to develop.
Как залить вручную в QApps с ветки? # Локально Для каждого приложения есть задача qappsUpload&amp;lt;build variant&amp;gt;.
Она заливает уже собранную apk.
Собери apk ./gradlew :avito:qappsUploadStaging -Pci=true
Чтобы было проще найти сборку, укажи комментарий аргументом -PbuildNumber=&amp;quot;my custom build&amp;quot; Known issues Для релизной сборки не совсем подходит, т.</description></item><item><title>Release</title><link>https://avito-tech.github.io/avito-android/docs/cd/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/cd/release/</guid><description>Релиз приложения Android # This page contains Avito specific details Канал для коммуникации: #regression-android
Dashboard релизов
Политика релизов мобильных приложений</description></item><item><title>Report Viewer</title><link>https://avito-tech.github.io/avito-android/docs/test/reportviewer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/reportviewer/</guid><description>Report Viewer # This page contains Avito specific details Используем отчеты в Report Viewer (internal), которые содержат:
Видео с эмулятора Только для упавших тестов Только для API 23+. На меньших версиях технологии не позволяют записывать надежно Скриншоты: до и после каждого шага, во время падения Трейс ошибки: цепочка событий которая привела к ошибке Logcat для упавших тестов HTTP запросы и ответы во время шагов Логи запросов к ресурсам: Resource Manager, AB/test, Integration API, phones Логи действий тестового фреймворка Using report viewer in a local run # Report Viewer works in local runs too.</description></item><item><title>Statsd</title><link>https://avito-tech.github.io/avito-android/docs/analytics/statsd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/analytics/statsd/</guid><description>Statsd (Graphite) # This page contains Avito specific details Realtime-метрики для отслеживания текущего состояния.
Monitoring (internal) - см. презентацию в самом начале.
См. использование StatsdEvent.</description></item><item><title>Technology radar</title><link>https://avito-tech.github.io/avito-android/docs/tech_radar/techradar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/tech_radar/techradar/</guid><description>Technology radar # Technology radar is a list of technologies and practices that are described in the same manner:
An overall status and recommendations for usage Limitations Reasons for choosing or declining Original: https://www.thoughtworks.com/radar
The radar # Gradle - buildSrc Template
FAQ # Detailed FAQ
What questions does tech radar help to solve? # What criteria guide the choice? What should happen to reconsider the choice?</description></item><item><title>Technology radar Template</title><link>https://avito-tech.github.io/avito-android/docs/tech_radar/template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/tech_radar/template/</guid><description>The Name # Quadrant: tools|techniques|platforms|languages &amp;amp; frameworks
Status (ring): hold|assess|trial|adopt
The description.
FAQ</description></item><item><title>Test case in code</title><link>https://avito-tech.github.io/avito-android/docs/test/testcaseincode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/testcaseincode/</guid><description>This page contains Avito specific details Test case in code # Avito uses in-house TMS: Internal docs
TMS was a source of truth about test cases in avito since the very early days.
While company shifted to test automation, manual synchronization between test cases in TMS and code in autotests became a problem.\
To simplify this process &amp;ldquo;test cases in code&amp;rdquo; concept was born.
Now only code contains truth about test cases, and automated ones are read-only in TMS.</description></item><item><title>Test framework</title><link>https://avito-tech.github.io/avito-android/docs/test_framework/testframework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test_framework/testframework/</guid><description>Test framework # ViewElement # PageObject над View. Составляющие:
InteractionContext - знания про родительский элемент, окружение Actions - действия с элементом Checks - проверки состояния Создание # Для создания используем фабричную функцию element:
val submitButton: ViewElement = element(withId(R.id.submit_button)) ViewMatcher будет учитывать родительский PageObject, унаследует его matcher.
Вложенные ViewElement # Все PageObject могут быть вложенными, отражать реальную иерархию:
// parent -&amp;gt; container -&amp;gt; button val container: ViewElement = element(withId(R.</description></item><item><title>Test impact analysis</title><link>https://avito-tech.github.io/avito-android/docs/ci/impactanalysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ci/impactanalysis/</guid><description>Test impact analysis # Test impact analysis finds automatically a minimum set of tests that can verify changed code.
The Rise of Test Impact Analysis
On module level # Besides tests, we have different work to do in modules: Android Lint, unit-tests, assemble, &amp;hellip;
If a module is not affected by changes, we don&amp;rsquo;t want to run anything in it.
mermaid.initialize({ flowchart: { useMaxWidth:true } }); graph TD AppX -- FeatureA AppX -- FeatureB AppX -- FeatureC AppY -- FeatureC AppY:::changed -- FeatureD:::changed classDef changed fill:#f96; These optimizations are supported in CI Steps Plugin.</description></item><item><title>Test Runner</title><link>https://avito-tech.github.io/avito-android/docs/test/runner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/runner/</guid><description>Avito test runner # This is the Gradle plugin to run Android instrumentation tests.
It can do the following:
Filter tests by annotations, by packages, by previous runs. Run tests in parallel. It orchestrates emulators in Kubernetes or uses local emulators. Rerun failed tests to deal with flakiness Save tests result in a report.
It uses an internal TMS (test management system). We are working on support other formats.</description></item><item><title>Testing a minimized build</title><link>https://avito-tech.github.io/avito-android/docs/test/testminimized/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/testminimized/</guid><description>Testing a minimized build # About minimization: link
We want to run UI tests against build as close as possible to a production one.
It&amp;rsquo;s quite a challenging task, mostly because of tooling problems: #126429384
Developers should maintain a list of keep rules of code referenced from a test app manually.
We work around these problems by using keeper.
Build type # Our build types: link
Android Gradle plugin uses testBuildType property to determine which build type to test.</description></item><item><title>Testing toasts</title><link>https://avito-tech.github.io/avito-android/docs/test/toast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/toast/</guid><description>Testing toasts # android.widget.Toast
Testing toasts is a hard because other toasts can show up and yours will be queued. We hack app with proxy object to mitigate this. It is also recommended to use snackbar, or your custom way to display brief unintrusive messages instead. So you should consider not testing it at all. Proxy toast # Use provided extension methods to be able to spy on showToast functions.</description></item><item><title>Troubleshooting</title><link>https://avito-tech.github.io/avito-android/docs/assemble/troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/troubleshooting/</guid><description>Troubleshooting # This page contains Avito specific details Что делать в случае непонятной ошибки? # Ситуация: падает или подвисает синхронизация проекта или сборка. По ошибке ничего не понятно.
Чтобы найти причину, проще всего последовательно исключать возможные причины.
Исключи влияние локальных изменений: переключись на свежий develop, убери все локальные изменения Проверь что включен VPN Исключи влияние mirakle: ./mirakle.py -d Исключи влияние IDE: проверь сборку из консоли Проверь не переопределено ли что-то подозрительное в ~/.</description></item><item><title>Troubleshooting UI Tests</title><link>https://avito-tech.github.io/avito-android/docs/test/troubleshootingui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/troubleshootingui/</guid><description>Troubleshooting # Known issues # All known bugs: jira filter (internal)
Camera auto-focus hangs up on 22 API # #139438163
There is no workaround. Skip test on this API level.
Error in local run: &amp;ldquo;Test framework quit unexpectedly&amp;rdquo; # Usually it indicates a problem in test runner, see logcat for errors.
In some cases test can run without problems. Use a local test report
Как понять почему упал тест?</description></item><item><title>Unit tests</title><link>https://avito-tech.github.io/avito-android/docs/test/unittesting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/unittesting/</guid><description>Unit tests # How to write good tests (mockito)
Assertions # Рекомендуется использовать assertThat() вместо assertEquals() и т.п.
Мотивация # Типизация # assertEquals(&amp;quot;id&amp;quot;, 1L) - падает только в рантайме assertThat(&amp;quot;id&amp;quot;, 'is'(1L)) - проверка при компиляции
Читаемость # assert &amp;ldquo;equals 3 x&amp;rdquo; assert &amp;ldquo;x is 3&amp;rdquo; - естественный порядок
Комбинирование условий # either(s).or(not(t)) each(s) И т.п. особенно с кастомными матчерами.
Сообщения об ошибках # assertTrue(response.</description></item><item><title>Work Manager Testing</title><link>https://avito-tech.github.io/avito-android/docs/test/workmanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/workmanager/</guid><description>Work Manager Testing # This document describes how to test WorkManager&amp;rsquo;s Workers.
How to test WorkManager&amp;rsquo;s Workers? # The best way to test your Workers is the way described in official documentation. In short, you can test your Workers directly without initializing WorkManager.
WorkManager is disabled for tests # Because using real WorkManager while testing involves a lot of problems as it starts to initialize just before AvitoTestApp (using ContentProvider mechanism).</description></item><item><title>Бенчмарки сборки</title><link>https://avito-tech.github.io/avito-android/docs/assemble/benchmarks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/benchmarks/</guid><description>Бенчмарки сборки # This page contains Avito specific details Для бенчмарков используем Gradle profiler, где можно описать воспрозводимый сценарий:
Редактировать java/kotlin файлы, Android ресурсы Переключаться между коммитами Проверить на разных версиях Gradle Почистить кеш, сборку Учесть прогрев перед измерениями How to start # Установи с помощью sdkman: sdk install gradleprofiler или скачай готовые бинарники: Installing.
Опиши свой сценарий. Возьми за основу один из готовых из ci/profiler/benchmarks.</description></item><item><title>Запуск тестов</title><link>https://avito-tech.github.io/avito-android/docs/test/run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/run/</guid><description>Запуск тестов # This page contains Avito specific details Автоматически запускаемые тесты # Тесты на PR # При создании Pull Request&amp;rsquo;а ваша ветка ребейзится на целевую ветку и автоматически запускается fastCheck, объявленный в avito/build.gradle:
Юнит тесты Инструментальные тесты (кроме помеченных аннотацией @Flaky): Перформанс Компонентные Скриншотные Интеграционные (@IntegrationTest) Android Lint Проверки develop&amp;rsquo;а # Раз в 3 часа при наличии изменений в develop-ветке на ней запускается fullCheck, объявленный в avito/build.</description></item><item><title>Нестабильные тесты</title><link>https://avito-tech.github.io/avito-android/docs/test/flakytests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/flakytests/</guid><description>Нестабильные тесты # This page contains Avito specific details Что не надо делать # Игнорировать тесты в TeamCity. Вы просто &amp;ldquo;подложите свинью&amp;rdquo; своим коллегам в будущем. Помечать тест как @Ignore. Есть специальная аннотация @Flaky. Убедись что тест действительно флакует # Посмотри в чаты #android-dev или #android-autotesting. Вероятно, проблема уже известна. Посмотри статистику стабильности теста Запусти тест для проверки в несколько прогонов в динамической конфигурации.</description></item><item><title>Реалтайм-аналитика</title><link>https://avito-tech.github.io/avito-android/docs/performance/analytics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/performance/analytics/</guid><description>Замеры перформанса экрана (internal) # Что умеем замерять # Пользовательские метрики # время от тача до начала инициализации экрана (предынициализация) время от тача до окончания отрисовки каждого из потоков данных экрана Этапы работы экрана # время инициализации экрана (ScreenInitTracker) время DI экрана (ScreenDiInjectTracker) время загрузки данных по сети и с диска (наследники ContentLoadingTracker) время обработки данных, например конвертации сетевых моделей в презентационные (ViewDataPreparingTracker) - не всегда используется, потому что не везде есть время отрисовки (с момента посылки команды на отрисовку до того как соответсвующий Runnable отработал на main thread) длительность инициализации и DI компонентов (сабмодулей) Отправляем метрики в statsd для realtime-аналитики и clickstream для AB-тестирования и детального анализа.</description></item><item><title>Сборки в контейнерах</title><link>https://avito-tech.github.io/avito-android/docs/ci/containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ci/containers/</guid><description>Сборки в контейнерах # This page contains Avito specific details Avito Docker documentation (internal)
Все образы расположены в ci/docker.
Android SDK image # This is the base image with Android Build Tools.
It&amp;rsquo;s not ready yet, see MBS-7071.
Android builder image # This is the image for building and testing Android applications. It contains Android SDK.
How to update android-builder image? # Build the image to test your changes In CI Run Build android-builder (internal) teamcity configuration.</description></item><item><title>Скриншотные тесты</title><link>https://avito-tech.github.io/avito-android/docs/test/screenshottesting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/screenshottesting/</guid><description>Скриншотные тесты # Цель # Скриншотные тесты позволяют вовремя отследить изменения цветов / стилей и предотвратить нежелательные изменения в UI
Что именно покрывают скриншотные тесты? # Сейчас скриншотные тесты распространяются только на компоненты из дизайн системы
Ограничения # В данный момент скриншотные тесты заливаются в git без использования git-lfs. Разумеется, если скриншотов в истории git будет слишком много, то вес репозитория будет слишком большой и работа с ним в целом замедлится.</description></item><item><title>Соглашения по работе с внешними библиотеками</title><link>https://avito-tech.github.io/avito-android/docs/externallibrarychangeprocess/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/externallibrarychangeprocess/</guid><description>Соглашения по работе с внешними библиотеками # Описание устарело.
Нужно пересмотреть и перенести на страницу про работу с зависимостями. Не нужно использовать без необходимости внешние библиотеки - ради абзаца кода нет смысла утяжелять проект
Не стоит использовать библиотеки сомнительного качества:
С низким рейтингом Плохо покрытые тестами Давно не обновляемые Код в которых заведомо низкого качества и т.п. Наличие или отсутствие каких-либо из этих свойств не является определяющим при выборе библиотеки.</description></item></channel></rss>